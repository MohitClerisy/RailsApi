---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/auth/register":
    post:
      summary: register authentication
      parameters: []
      responses:
        '201':
          description: successful
        '422':
          description: unprocessable_entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
  "/api/v1/auth/login":
    post:
      summary: login authentication
      parameters: []
      responses:
        '200':
          description: successful
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/posts/{post_id}/comments":
    parameters:
    - name: post_id
      in: path
      description: post_id
      required: true
      schema:
        type: string
    get:
      summary: list comments
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        description: 'Page number (default: 1)'
        schema:
          type: integer
      - name: per_page
        in: query
        description: 'Items per page (default: 10)'
        schema:
          type: integer
      responses:
        '200':
          description: successful
    post:
      summary: create comment
      security:
      - BearerAuth: []
      parameters:
      - name: post_id
        in: path
        description: post_id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
              - content
  "/api/v1/comments/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show comment
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
    patch:
      summary: update comment
      security:
      - BearerAuth: []
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
              - content
    put:
      summary: update comment
      security:
      - BearerAuth: []
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
              - content
    delete:
      summary: delete comment
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
  "/api/v1/posts":
    get:
      summary: list posts
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        description: 'Page number (default: 1)'
        schema:
          type: integer
      - name: per_page
        in: query
        description: 'Items per page (default: 10)'
        schema:
          type: integer
      responses:
        '200':
          description: successful
    post:
      summary: create post
      security:
      - BearerAuth: []
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              required:
              - title
              - description
  "/api/v1/posts/{id}":
    get:
      summary: show post
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
    patch:
      summary: update post
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              required:
              - title
              - description
    put:
      summary: update post
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              required:
              - title
              - description
    delete:
      summary: delete post
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
  "/api/v1/user/my-profile":
    get:
      summary: Retrieve user profile
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1:3000/
components:
  securitySchemes:
    BearerAuth:
      type: http
      name: Authorization
      scheme: bearer
      in: header
